<?xml version="1.0" encoding="UTF-8"?>
<AST xmlns:node="http://nikic.github.com/PHPParser/XML/node" xmlns:subNode="http://nikic.github.com/PHPParser/XML/subNode" xmlns:attribute="http://nikic.github.com/PHPParser/XML/attribute" xmlns:scalar="http://nikic.github.com/PHPParser/XML/scalar">
 <scalar:array>
  <node:Stmt_Function>
   <attribute:comments>
    <scalar:array>
     <comment isDocComment="true" line="2">/**
 * Smarty plugin
 *
 * @package Smarty
 * @subpackage PluginsFunction
 */</comment>
     <comment isDocComment="true" line="9">/**
 * Smarty {implode} plugin
 *
 * Type:     function&lt;br&gt;
 * Name:     implode&lt;br&gt;
 * Purpose:  implode Array
 * Use: {implode value=&quot;&quot; separator=&quot;&quot;}
 *
 * @link http://www.smarty.net/manual/en/language.function.fetch.php {fetch}
 *       (Smarty online manual)
 * 
 * @param array                    $params   parameters
 * @param Smarty_Internal_Template $template template object
 * @return string|null if the assign parameter is passed, Smarty assigns the result to a template variable
 */</comment>
    </scalar:array>
   </attribute:comments>
   <attribute:startLine>
    <scalar:int>24</scalar:int>
   </attribute:startLine>
   <attribute:endLine>
    <scalar:int>36</scalar:int>
   </attribute:endLine>
   <subNode:byRef>
    <scalar:false/>
   </subNode:byRef>
   <subNode:params>
    <scalar:array>
     <node:Param>
      <attribute:startLine>
       <scalar:int>24</scalar:int>
      </attribute:startLine>
      <attribute:endLine>
       <scalar:int>24</scalar:int>
      </attribute:endLine>
      <subNode:name>
       <scalar:string>params</scalar:string>
      </subNode:name>
      <subNode:default>
       <scalar:null/>
      </subNode:default>
      <subNode:type>
       <scalar:null/>
      </subNode:type>
      <subNode:byRef>
       <scalar:false/>
      </subNode:byRef>
     </node:Param>
     <node:Param>
      <attribute:startLine>
       <scalar:int>24</scalar:int>
      </attribute:startLine>
      <attribute:endLine>
       <scalar:int>24</scalar:int>
      </attribute:endLine>
      <subNode:name>
       <scalar:string>template</scalar:string>
      </subNode:name>
      <subNode:default>
       <scalar:null/>
      </subNode:default>
      <subNode:type>
       <scalar:null/>
      </subNode:type>
      <subNode:byRef>
       <scalar:false/>
      </subNode:byRef>
     </node:Param>
    </scalar:array>
   </subNode:params>
   <subNode:stmts>
    <scalar:array>
     <node:Stmt_If>
      <attribute:startLine>
       <scalar:int>26</scalar:int>
      </attribute:startLine>
      <attribute:endLine>
       <scalar:int>30</scalar:int>
      </attribute:endLine>
      <subNode:stmts>
       <scalar:array>
        <node:Expr_FuncCall>
         <attribute:startLine>
          <scalar:int>28</scalar:int>
         </attribute:startLine>
         <attribute:endLine>
          <scalar:int>28</scalar:int>
         </attribute:endLine>
         <subNode:name>
          <node:Name>
           <attribute:startLine>
            <scalar:int>28</scalar:int>
           </attribute:startLine>
           <attribute:endLine>
            <scalar:int>28</scalar:int>
           </attribute:endLine>
           <subNode:parts>
            <scalar:array>
             <scalar:string>trigger_error</scalar:string>
            </scalar:array>
           </subNode:parts>
          </node:Name>
         </subNode:name>
         <subNode:args>
          <scalar:array>
           <node:Arg>
            <attribute:startLine>
             <scalar:int>28</scalar:int>
            </attribute:startLine>
            <attribute:endLine>
             <scalar:int>28</scalar:int>
            </attribute:endLine>
            <subNode:value>
             <node:Scalar_String>
              <attribute:startLine>
               <scalar:int>28</scalar:int>
              </attribute:startLine>
              <attribute:endLine>
               <scalar:int>28</scalar:int>
              </attribute:endLine>
              <subNode:value>
               <scalar:string>[plugin] implode parameter 'value' cannot be empty</scalar:string>
              </subNode:value>
             </node:Scalar_String>
            </subNode:value>
            <subNode:byRef>
             <scalar:false/>
            </subNode:byRef>
           </node:Arg>
           <node:Arg>
            <attribute:startLine>
             <scalar:int>28</scalar:int>
            </attribute:startLine>
            <attribute:endLine>
             <scalar:int>28</scalar:int>
            </attribute:endLine>
            <subNode:value>
             <node:Expr_ConstFetch>
              <attribute:startLine>
               <scalar:int>28</scalar:int>
              </attribute:startLine>
              <attribute:endLine>
               <scalar:int>28</scalar:int>
              </attribute:endLine>
              <subNode:name>
               <node:Name>
                <attribute:startLine>
                 <scalar:int>28</scalar:int>
                </attribute:startLine>
                <attribute:endLine>
                 <scalar:int>28</scalar:int>
                </attribute:endLine>
                <subNode:parts>
                 <scalar:array>
                  <scalar:string>E_USER_NOTICE</scalar:string>
                 </scalar:array>
                </subNode:parts>
               </node:Name>
              </subNode:name>
             </node:Expr_ConstFetch>
            </subNode:value>
            <subNode:byRef>
             <scalar:false/>
            </subNode:byRef>
           </node:Arg>
          </scalar:array>
         </subNode:args>
        </node:Expr_FuncCall>
        <node:Stmt_Return>
         <attribute:startLine>
          <scalar:int>29</scalar:int>
         </attribute:startLine>
         <attribute:endLine>
          <scalar:int>29</scalar:int>
         </attribute:endLine>
         <subNode:expr>
          <scalar:null/>
         </subNode:expr>
        </node:Stmt_Return>
       </scalar:array>
      </subNode:stmts>
      <subNode:elseifs>
       <scalar:array/>
      </subNode:elseifs>
      <subNode:else>
       <scalar:null/>
      </subNode:else>
      <subNode:cond>
       <node:Expr_BooleanNot>
        <attribute:startLine>
         <scalar:int>26</scalar:int>
        </attribute:startLine>
        <attribute:endLine>
         <scalar:int>26</scalar:int>
        </attribute:endLine>
        <subNode:expr>
         <node:Expr_Isset>
          <attribute:startLine>
           <scalar:int>26</scalar:int>
          </attribute:startLine>
          <attribute:endLine>
           <scalar:int>26</scalar:int>
          </attribute:endLine>
          <subNode:vars>
           <scalar:array>
            <node:Expr_ArrayDimFetch>
             <attribute:startLine>
              <scalar:int>26</scalar:int>
             </attribute:startLine>
             <attribute:endLine>
              <scalar:int>26</scalar:int>
             </attribute:endLine>
             <subNode:var>
              <node:Expr_Variable>
               <attribute:startLine>
                <scalar:int>26</scalar:int>
               </attribute:startLine>
               <attribute:endLine>
                <scalar:int>26</scalar:int>
               </attribute:endLine>
               <subNode:name>
                <scalar:string>params</scalar:string>
               </subNode:name>
              </node:Expr_Variable>
             </subNode:var>
             <subNode:dim>
              <node:Scalar_String>
               <attribute:startLine>
                <scalar:int>26</scalar:int>
               </attribute:startLine>
               <attribute:endLine>
                <scalar:int>26</scalar:int>
               </attribute:endLine>
               <subNode:value>
                <scalar:string>value</scalar:string>
               </subNode:value>
              </node:Scalar_String>
             </subNode:dim>
            </node:Expr_ArrayDimFetch>
           </scalar:array>
          </subNode:vars>
         </node:Expr_Isset>
        </subNode:expr>
       </node:Expr_BooleanNot>
      </subNode:cond>
     </node:Stmt_If>
     <node:Stmt_If>
      <attribute:startLine>
       <scalar:int>32</scalar:int>
      </attribute:startLine>
      <attribute:endLine>
       <scalar:int>33</scalar:int>
      </attribute:endLine>
      <subNode:stmts>
       <scalar:array>
        <node:Expr_Assign>
         <attribute:startLine>
          <scalar:int>33</scalar:int>
         </attribute:startLine>
         <attribute:endLine>
          <scalar:int>33</scalar:int>
         </attribute:endLine>
         <subNode:var>
          <node:Expr_ArrayDimFetch>
           <attribute:startLine>
            <scalar:int>33</scalar:int>
           </attribute:startLine>
           <attribute:endLine>
            <scalar:int>33</scalar:int>
           </attribute:endLine>
           <subNode:var>
            <node:Expr_Variable>
             <attribute:startLine>
              <scalar:int>33</scalar:int>
             </attribute:startLine>
             <attribute:endLine>
              <scalar:int>33</scalar:int>
             </attribute:endLine>
             <subNode:name>
              <scalar:string>params</scalar:string>
             </subNode:name>
            </node:Expr_Variable>
           </subNode:var>
           <subNode:dim>
            <node:Scalar_String>
             <attribute:startLine>
              <scalar:int>33</scalar:int>
             </attribute:startLine>
             <attribute:endLine>
              <scalar:int>33</scalar:int>
             </attribute:endLine>
             <subNode:value>
              <scalar:string>separator</scalar:string>
             </subNode:value>
            </node:Scalar_String>
           </subNode:dim>
          </node:Expr_ArrayDimFetch>
         </subNode:var>
         <subNode:expr>
          <node:Scalar_String>
           <attribute:startLine>
            <scalar:int>33</scalar:int>
           </attribute:startLine>
           <attribute:endLine>
            <scalar:int>33</scalar:int>
           </attribute:endLine>
           <subNode:value>
            <scalar:string>,</scalar:string>
           </subNode:value>
          </node:Scalar_String>
         </subNode:expr>
        </node:Expr_Assign>
       </scalar:array>
      </subNode:stmts>
      <subNode:elseifs>
       <scalar:array/>
      </subNode:elseifs>
      <subNode:else>
       <scalar:null/>
      </subNode:else>
      <subNode:cond>
       <node:Expr_Empty>
        <attribute:startLine>
         <scalar:int>32</scalar:int>
        </attribute:startLine>
        <attribute:endLine>
         <scalar:int>32</scalar:int>
        </attribute:endLine>
        <subNode:expr>
         <node:Expr_ArrayDimFetch>
          <attribute:startLine>
           <scalar:int>32</scalar:int>
          </attribute:startLine>
          <attribute:endLine>
           <scalar:int>32</scalar:int>
          </attribute:endLine>
          <subNode:var>
           <node:Expr_Variable>
            <attribute:startLine>
             <scalar:int>32</scalar:int>
            </attribute:startLine>
            <attribute:endLine>
             <scalar:int>32</scalar:int>
            </attribute:endLine>
            <subNode:name>
             <scalar:string>params</scalar:string>
            </subNode:name>
           </node:Expr_Variable>
          </subNode:var>
          <subNode:dim>
           <node:Scalar_String>
            <attribute:startLine>
             <scalar:int>32</scalar:int>
            </attribute:startLine>
            <attribute:endLine>
             <scalar:int>32</scalar:int>
            </attribute:endLine>
            <subNode:value>
             <scalar:string>separator</scalar:string>
            </subNode:value>
           </node:Scalar_String>
          </subNode:dim>
         </node:Expr_ArrayDimFetch>
        </subNode:expr>
       </node:Expr_Empty>
      </subNode:cond>
     </node:Stmt_If>
     <node:Stmt_Return>
      <attribute:startLine>
       <scalar:int>35</scalar:int>
      </attribute:startLine>
      <attribute:endLine>
       <scalar:int>35</scalar:int>
      </attribute:endLine>
      <subNode:expr>
       <node:Expr_FuncCall>
        <attribute:startLine>
         <scalar:int>35</scalar:int>
        </attribute:startLine>
        <attribute:endLine>
         <scalar:int>35</scalar:int>
        </attribute:endLine>
        <subNode:name>
         <node:Name>
          <attribute:startLine>
           <scalar:int>35</scalar:int>
          </attribute:startLine>
          <attribute:endLine>
           <scalar:int>35</scalar:int>
          </attribute:endLine>
          <subNode:parts>
           <scalar:array>
            <scalar:string>implode</scalar:string>
           </scalar:array>
          </subNode:parts>
         </node:Name>
        </subNode:name>
        <subNode:args>
         <scalar:array>
          <node:Arg>
           <attribute:startLine>
            <scalar:int>35</scalar:int>
           </attribute:startLine>
           <attribute:endLine>
            <scalar:int>35</scalar:int>
           </attribute:endLine>
           <subNode:value>
            <node:Expr_ArrayDimFetch>
             <attribute:startLine>
              <scalar:int>35</scalar:int>
             </attribute:startLine>
             <attribute:endLine>
              <scalar:int>35</scalar:int>
             </attribute:endLine>
             <subNode:var>
              <node:Expr_Variable>
               <attribute:startLine>
                <scalar:int>35</scalar:int>
               </attribute:startLine>
               <attribute:endLine>
                <scalar:int>35</scalar:int>
               </attribute:endLine>
               <subNode:name>
                <scalar:string>params</scalar:string>
               </subNode:name>
              </node:Expr_Variable>
             </subNode:var>
             <subNode:dim>
              <node:Scalar_String>
               <attribute:startLine>
                <scalar:int>35</scalar:int>
               </attribute:startLine>
               <attribute:endLine>
                <scalar:int>35</scalar:int>
               </attribute:endLine>
               <subNode:value>
                <scalar:string>value</scalar:string>
               </subNode:value>
              </node:Scalar_String>
             </subNode:dim>
            </node:Expr_ArrayDimFetch>
           </subNode:value>
           <subNode:byRef>
            <scalar:false/>
           </subNode:byRef>
          </node:Arg>
          <node:Arg>
           <attribute:startLine>
            <scalar:int>35</scalar:int>
           </attribute:startLine>
           <attribute:endLine>
            <scalar:int>35</scalar:int>
           </attribute:endLine>
           <subNode:value>
            <node:Expr_ArrayDimFetch>
             <attribute:startLine>
              <scalar:int>35</scalar:int>
             </attribute:startLine>
             <attribute:endLine>
              <scalar:int>35</scalar:int>
             </attribute:endLine>
             <subNode:var>
              <node:Expr_Variable>
               <attribute:startLine>
                <scalar:int>35</scalar:int>
               </attribute:startLine>
               <attribute:endLine>
                <scalar:int>35</scalar:int>
               </attribute:endLine>
               <subNode:name>
                <scalar:string>params</scalar:string>
               </subNode:name>
              </node:Expr_Variable>
             </subNode:var>
             <subNode:dim>
              <node:Scalar_String>
               <attribute:startLine>
                <scalar:int>35</scalar:int>
               </attribute:startLine>
               <attribute:endLine>
                <scalar:int>35</scalar:int>
               </attribute:endLine>
               <subNode:value>
                <scalar:string>separator</scalar:string>
               </subNode:value>
              </node:Scalar_String>
             </subNode:dim>
            </node:Expr_ArrayDimFetch>
           </subNode:value>
           <subNode:byRef>
            <scalar:false/>
           </subNode:byRef>
          </node:Arg>
         </scalar:array>
        </subNode:args>
       </node:Expr_FuncCall>
      </subNode:expr>
     </node:Stmt_Return>
    </scalar:array>
   </subNode:stmts>
   <subNode:name>
    <scalar:string>smarty_function_implode</scalar:string>
   </subNode:name>
   <subNode:namespacedName>
    <node:Name>
     <attribute:comments>
      <scalar:array>
       <comment isDocComment="true" line="2">/**
 * Smarty plugin
 *
 * @package Smarty
 * @subpackage PluginsFunction
 */</comment>
       <comment isDocComment="true" line="9">/**
 * Smarty {implode} plugin
 *
 * Type:     function&lt;br&gt;
 * Name:     implode&lt;br&gt;
 * Purpose:  implode Array
 * Use: {implode value=&quot;&quot; separator=&quot;&quot;}
 *
 * @link http://www.smarty.net/manual/en/language.function.fetch.php {fetch}
 *       (Smarty online manual)
 * 
 * @param array                    $params   parameters
 * @param Smarty_Internal_Template $template template object
 * @return string|null if the assign parameter is passed, Smarty assigns the result to a template variable
 */</comment>
      </scalar:array>
     </attribute:comments>
     <attribute:startLine>
      <scalar:int>24</scalar:int>
     </attribute:startLine>
     <attribute:endLine>
      <scalar:int>36</scalar:int>
     </attribute:endLine>
     <subNode:parts>
      <scalar:array>
       <scalar:string>smarty_function_implode</scalar:string>
      </scalar:array>
     </subNode:parts>
    </node:Name>
   </subNode:namespacedName>
  </node:Stmt_Function>
 </scalar:array>
</AST>
